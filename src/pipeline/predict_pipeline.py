import sys
import pandas as pd
from src.exception import CustomException
from src.utils import load_object
from src.logger import logging


class PredictPipeline:
    """PredictPipeline class for generating predictions based on user input data.

    This class loads a trained model and a preprocessor, preprocesses input features, 
    and returns predictions as a NumPy array.

    Attributes:
        None
    """    
    def __init__(self):
        """Initializes the PredictPipeline object."""
        pass

    def predict(self,features):
        """Predicts the output based on input features.

        Args:
            features (pd.DataFrame): A DataFrame containing the features input from the web app. 
                                      The DataFrame should have columns corresponding to the model's expected input.

        Raises:
            CustomException: If an error occurs during model loading, preprocessing, or prediction, 
                             an exception with the error message and traceback will be raised.

        Returns:
            numpy.ndarray: An array of predicted values generated by the model.

        Example:
             pipeline = PredictPipeline()
             predictions = pipeline.predict(input_df)
        """              
        try:
            logging.info('Loading model and preprocessor for prediction on custom data from web app')
            model_path='artifacts\model.pkl'
            preprocessor_path='artifacts\preprocessor.pkl'            
            model= load_object(file_path=model_path)
            preprocessor=load_object(file_path=preprocessor_path)
            
            logging.info('Data preprocessing for the custom data input')
            data_preprocessed=preprocessor.transform(features)
            
            logging.info('prediction on preprocessed custom data input')
            preds=model.predict(data_preprocessed)
            

            return preds
        
        except Exception as e:
            raise CustomException(e,sys)



class CustomData:
    """CustomData class to encapsulate input features for prediction.

    This class initializes with the user's input data and provides a method to convert the data 
    into a format suitable for prediction.

    Attributes:
        gender (str): The gender of the student.
        race_ethnicity (str): The race/ethnicity of the student.
        parental_level_of_education (str): The highest level of education attained by the student's parents.
        lunch (str): The type of lunch (standard or free/reduced) the student receives.
        test_preparation_course (str): Indicates whether the student completed a test preparation course.
        reading_score (int): The student's reading score (0-100).
        writing_score (int): The student's writing score (0-100).
    """        
    def __init__(self, gender: str, race_ethnicity: str, parental_level_of_education: str,
                 lunch: str, test_preparation_course: str, reading_score: int, writing_score: int):
        
        """Initializes the independent features for prediction.

        Args:
            gender (str): Gender of the student.
            race_ethnicity (str): Race/ethnicity of the student.
            parental_level_of_education (str): Parent's highest education level.
            lunch (str): Lunch type (e.g., 'standard', 'free/reduced').
            test_preparation_course (str): Completion status of the test preparation course.
            reading_score (int): Student's reading score (0-100).
            writing_score (int): Student's writing score (0-100).
        """    

        self.gender = gender
        self.race_ethnicity = race_ethnicity
        self.parental_level_of_education = parental_level_of_education
        self.lunch = lunch
        self.test_preparation_course = test_preparation_course
        self.reading_score = reading_score
        self.writing_score = writing_score

    def get_data_as_data_frame(self) -> pd.DataFrame:
        """Converts the input features to a DataFrame for prediction.

        Raises:
            CustomException: If an error occurs during the conversion to DataFrame.

        Returns:
            pd.DataFrame: A DataFrame containing the features structured for model input.

        Example:
            custom_data = CustomData('female', 'group A', 'high school', 'standard', 'none', 75, 80)
            input_df = custom_data.get_data_as_data_frame()
        """     
        try:
            custom_data_input_dict = {
                "gender": [self.gender],
                "race_ethnicity": [self.race_ethnicity],
                "parental_level_of_education": [self.parental_level_of_education],
                "lunch": [self.lunch],
                "test_preparation_course": [self.test_preparation_course],
                "reading_score": [self.reading_score],
                "writing_score": [self.writing_score],
            }

            return pd.DataFrame(custom_data_input_dict)

        except Exception as e:
            raise CustomException(e, sys)